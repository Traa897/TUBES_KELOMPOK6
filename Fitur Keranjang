import sys
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QPushButton, QScrollArea, QGridLayout, QFrame,
    QLineEdit, QMessageBox, QDialog, QListWidget, QListWidgetItem
)
from PyQt5.QtCore import Qt


class CartItem:
    def __init__(self, name, price, quantity=1):
        self.name = name
        self.price = price
        self.quantity = quantity
        self.total_price = self.calculate_total_price()

    def calculate_total_price(self):
        try:
            price_value = int(self.price.replace("Rp ", "").replace(".", ""))
            return price_value * self.quantity
        except (ValueError, TypeError):
            return 0


class CartDialog(QDialog):
    def __init__(self, cart_items, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Keranjang Pesanan")
        self.setGeometry(300, 300, 400, 500)
        self.cart_items = cart_items

        layout = QVBoxLayout()
        self.order_list = QListWidget()
        layout.addWidget(self.order_list)

        self.total_label = QLabel("Total: Rp 0")
        self.total_label.setStyleSheet("font-weight: bold; font-size: 18px;")
        layout.addWidget(self.total_label)

        order_btn = QPushButton("Proses Pesanan")
        order_btn.clicked.connect(self.process_order)
        layout.addWidget(order_btn)

        self.setLayout(layout)
        self.update_cart()

    def update_cart(self):
        self.order_list.clear()
        total = 0
        for item in self.cart_items:
            item_text = f"{item.name} x{item.quantity} - Rp {item.total_price:,}"
            list_item = QListWidgetItem(item_text)
            self.order_list.addItem(list_item)
            total += item.total_price

        self.total_label.setText(f"Total: Rp {total:,}")

    def process_order(self):
        if not self.cart_items:
            QMessageBox.warning(self, "Keranjang Kosong", "Tambahkan item ke keranjang terlebih dahulu.")
            return

        reply = QMessageBox.question(
            self,
            "Konfirmasi Pesanan",
            "Apakah Anda yakin ingin memproses pesanan?",
            QMessageBox.Yes | QMessageBox.No
        )

        if reply == QMessageBox.Yes:
            QMessageBox.information(self, "Pesanan Berhasil", "Terima kasih telah memesan!")
            self.cart_items.clear()
            self.update_cart()
            self.accept()


class MenuCustomizationDialog(QDialog):
    def __init__(self, item, parent=None):
        super().__init__(parent)
        self.setWindowTitle(f"Kustomisasi {item['name']}")
        self.setGeometry(300, 300, 400, 500)
        self.item = item
        self.quantity = 1

        layout = QVBoxLayout()

        name_label = QLabel(item['name'])
        name_label.setStyleSheet("font-weight: bold; font-size: 20px;")
        layout.addWidget(name_label)

        desc_label = QLabel(item['description'])
        layout.addWidget(desc_label)

        price_label = QLabel(f"Harga: {item['price']}")
        layout.addWidget(price_label)

        quantity_layout = QHBoxLayout()
        minus_btn = QPushButton("-")
        minus_btn.clicked.connect(self.decrease_quantity)
        plus_btn = QPushButton("+")
        plus_btn.clicked.connect(self.increase_quantity)

        self.quantity_label = QLabel(str(self.quantity))

        quantity_layout.addWidget(minus_btn)
        quantity_layout.addWidget(self.quantity_label)
        quantity_layout.addWidget(plus_btn)

        layout.addLayout(quantity_layout)

        add_to_cart_btn = QPushButton("Tambah ke Keranjang")
        add_to_cart_btn.clicked.connect(self.add_to_cart)
        layout.addWidget(add_to_cart_btn)

        self.setLayout(layout)

    def increase_quantity(self):
        self.quantity += 1
        self.quantity_label.setText(str(self.quantity))

    def decrease_quantity(self):
        if self.quantity > 1:
            self.quantity -= 1
            self.quantity_label.setText(str(self.quantity))

    def add_to_cart(self):
        self.done(self.quantity)


class BestSellerRecommendationPage(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Rekomendasi Best Seller Makanan")
        self.setGeometry(100, 100, 1200, 800)

        self.cart_items = []
        main_container = QWidget()
        main_layout = QVBoxLayout(main_container)

        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("Cari makanan...")
        self.search_input.textChanged.connect(self.filter_items)
        main_layout.addWidget(self.search_input)

        scroll_area = QScrollArea()
        scroll_widget = QWidget()
        self.scroll_layout = QGridLayout(scroll_widget)
        scroll_area.setWidget(scroll_widget)
        scroll_area.setWidgetResizable(True)

        self.original_categories = [
            {
                "category": "Makanan Tradisional",
                "items": [
                    {
                        "name": "Nasi Goreng Mbah",
                        "restaurant": "Warung Mbah Austin",
                        "rating": 4.9,
                        "price": "Rp 25.000",
                        "description": "Nasi goreng Gacor dengan sentuhan mbah"
                    },
                    {
                        "name": "Sate Ayam Marduro",
                        "restaurant": "Sate Raja Madura",
                        "rating": 4.8,
                        "price": "Rp 35.000",
                        "description": "Sate ayam dengan bumbu kacang khas Madura enaknyoooo"
                    },
                    {
                        "name": "Mie Ayam Guacorrr",
                        "restaurant": "Mie Ayam Kusman",
                        "rating": 4.6,
                        "price": "Rp 65.000",
                        "description": "Mie Ayam dengan kuah yang sangat enak dan gurih"
                    }
                ]
            },
            {
                "category": "Makanan Modern",
                "items": [
                    {
                        "name": "Austin Kebab",
                        "restaurant": "Austin Kebab gacor",
                        "rating": 4.7,
                        "price": "Rp 85.000",
                        "description": "Kebab asli Turky Paling enak"
                    },
                    {
                        "name": "Toast",
                        "restaurant": "Restaurant Vera's",
                        "rating": 4.6,
                        "price": "Rp 80.000",
                        "description": "Dengan rasa yang asli dan enak"
                    }
                ]
            }
        ]

        self.categories = self.original_categories.copy()
        self.display_categories()

        cart_btn = QPushButton("ðŸ›’ Keranjang")
        cart_btn.clicked.connect(self.show_cart)
        main_layout.addWidget(cart_btn)
        main_layout.addWidget(scroll_area)

        self.setCentralWidget(main_container)

    def create_best_seller_item(self, item):
        item_widget = QFrame()
        item_widget.setStyleSheet("""
            QFrame {
                background-color: white;
                border-radius: 10px;
                padding: 15px;
                border: 1px solid #E0E0E0;
                min-width: 250px;
                max-width: 300px;
            }
        """)

        layout = QVBoxLayout()

        name_label = QLabel(item['name'])
        name_label.setStyleSheet("""
            font-size: 18px;
            font-weight: bold;
            color: #333;
        """)
        layout.addWidget(name_label)

        restaurant_label = QLabel(f"Dari: {item['restaurant']}")
        restaurant_label.setStyleSheet("color: gray;")
        layout.addWidget(restaurant_label)

        description_label = QLabel(item['description'])
        description_label.setStyleSheet("""
            font-style: italic;
            color: #666;
        """)
        layout.addWidget(description_label)

        rating_price_layout = QHBoxLayout()

        rating_label = QLabel(f"â˜… {item['rating']}")
        rating_label.setStyleSheet("""
            color: gold;
            font-weight: bold;
        """)
        rating_price_layout.addWidget(rating_label)

        price_label = QLabel(item['price'])
        price_label.setStyleSheet("""
            color: #9932CC;
            font-weight: bold;
        """)
        rating_price_layout.addWidget(price_label)

        layout.addLayout(rating_price_layout)

        order_btn = QPushButton("Pesan")
        order_btn.setStyleSheet("""
            background-color: #9932CC;
            color: white;
            border: none;
            padding: 10px;
            border-radius: 5px;
        """)
        order_btn.clicked.connect(lambda checked, i=item: self.customize_item(i))
        layout.addWidget(order_btn)

        item_widget.setLayout(layout)
        return item_widget

    def customize_item(self, item):
        dialog = MenuCustomizationDialog(item, self)
        quantity = dialog.exec_()

        if quantity > 0:
            cart_item = CartItem(item['name'], item['price'], quantity)
            existing_item = next((x for x in self.cart_items if x.name == item['name']), None)

            if existing_item:
                existing_item.quantity += quantity
                existing_item.total_price = existing_item.calculate_total_price()
            else:
                self.cart_items.append(cart_item)

    def show_cart(self):
        dialog = CartDialog(self.cart_items, self)
        dialog.exec_()

    def filter_items(self):
        query = self.search_input.text().lower()
        self.categories = [
            {
                "category": cat["category"],
                "items": [
                    item for item in cat["items"] if query in item["name"].lower()
                ]
            }
            for cat in self.original_categories
        ]
        self.display_categories()

    def display_categories(self):
        for i in reversed(range(self.scroll_layout.count())):
            self.scroll_layout.itemAt(i).widget().deleteLater()

        row, col = 0, 0
        for category in self.categories:
            if not category['items']:
                continue

            category_label = QLabel(category['category'])
            category_label.setStyleSheet("font-weight: bold; font-size: 20px;")
            self.scroll_layout.addWidget(category_label, row, 0, 1, 3)
            row += 1

            for item in category['items']:
                item_widget = self.create_best_seller_item(item)
                self.scroll_layout.addWidget(item_widget, row, col)
                col += 1
                if col > 2:
                    col = 0
                    row += 1
            row += 1


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = BestSellerRecommendationPage()
    window.show()
    sys.exit(app.exec_())
